%{
    #include <iostream>
    #include <string>
    #include <list>
    
    #include "conf_file_element.h"
    #include "conf_file_section.h"
    #include "conf_file_statement.h"
    
    using namespace std;
    
    extern int yylex(void);
    extern int current_line_number, current_column_number;
        
    RenderFarm::ConfFileSection *tree;
    
    void yyerror(const char *message) {
        cerr << "Error at " << current_line_number << "," << current_column_number << ": " << message << endl;
    }
%}

%union {
    string *str;
    RenderFarm::ConfFileSection *section;
    list<RenderFarm::ConfFileElement *> *statement_list;
    RenderFarm::ConfFileStatement *statement;
    list<string *> *word_list;
}

%token <str> WORD
/*%type <section> top
%type <statement_list> statements
%type <statement> statement
%type <statement> statement_termination
%type <word_list> words*/
%start top

%%

top: statements
    /*{
        $$ = new RenderFarm::ConfFileSection();
        $$->set_elements($1);
        $$->dump();
        delete $$;
        cout << "Parse complete" << endl;
    };*/

statements: statement statements
    /*{
        $2->push_front($1);
        $$ = $2;
    }*/
    |
    /*{
        $$ = new list<RenderFarm::ConfFileElement *>();
    }*/
    ;

statement: words statement_termination
    /*{
        string *first_word = $1->front();
        $1->pop_front();
        $2->set_key(first_word);
        $$ = $2;
    }*/
    |
    error
    ;

statement_termination: ';'
    /*{
        $$ = new RenderFarm::ConfFileStatement();
    }*/
                       | compound_statement
                       ;

compound_statement: '{' statements '}' /*{ delete $2; cout << "End compound statement body" << endl; };*/

words: WORD words
    /*{
        $2->push_front($1);
        $$ = $2;
    }*/
    |
    /*{
        $$ = new list<string *>();
    }*/
    ;

%%